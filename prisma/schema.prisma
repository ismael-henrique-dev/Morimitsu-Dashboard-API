generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  instructor
}

enum AnnouncementType {
  graduation
  birthday
}

enum Belt {
  white
  gray
  yellow
  orange
  green
  blue
  purple
  brown
  black
  red
  coral  // vermelho e preto (7ยบ e 8ยบ graus)
  red_black // vermelho e branco
}
model users {
  id        String   @id @default(uuid())
  username  String   
  email     String   @unique
  password  String
  role      Role
  classes   classes[]       @relation("UserClasses")
  sessions  class_sessions[] @relation("UserSessions")
}

model students {
  id                String   @id @default(uuid())
  alias             String?
  belt              Belt
  grade             Int
  current_frequency Int      @default(0)
  total_frequency   Int      @default(0)
  email             String  @unique
  class_id          String?
  ifce_enrollment   Int?
  
  // Relationaments
  class             classes?          @relation(fields: [class_id], references: [id])
  personal_info     personal_info?
  graduations       graduations[]
  announcements     announcements[]
  attendances       student_attendance[]
}

model personal_info {
  id           String   @id @default(uuid())
  student_id   String   @unique
  cpf          String  @unique
  parent_name  String
  parent_phone String
  student_phone String
  address      String
  full_name    String
  date_of_birth DateTime

  student      students @relation(fields: [student_id], references: [id])
}

model announcements {
  id         String            @id @default(uuid())
  student_id String
  message    String
  type       AnnouncementType
  reference_date DateTime
  expires_at  DateTime

  student    students @relation(fields: [student_id], references: [id])
}

model graduations {
  id              String   @id @default(uuid())
  student_id      String
  graduation_date DateTime
  belt            Belt
  grade           Int

  student         students @relation(fields: [student_id], references: [id])
}

model classes {
  id          String   @id @default(uuid())
  name        String
  age_range   String
  schedule    String
  instructor_id String

  instructor  users      @relation("UserClasses", fields: [instructor_id], references: [id])
  sessions    class_sessions[]
  students    students[]
}

model class_sessions {
  id            String   @id @default(uuid())
  class_id      String
  instructor_id String
  session_date  DateTime

  class         classes   @relation(fields: [class_id], references: [id])
  instructor    users     @relation("UserSessions", fields: [instructor_id], references: [id])
  attendances   student_attendance[]
}

model student_attendance {
  id          String   @id @default(uuid())
  present     Boolean  @default(false)
  student_id  String
  session_id  String

  student     students       @relation(fields: [student_id], references: [id])
  session     class_sessions @relation(fields: [session_id], references: [id])
}
